Overview of all Classes
-----------------------

DDD                         empty package, just contains POD

DDD::Base::Container        common base for Domain / Subdomain
DDD::Base::Domain           Base class for domain objects, auto-assigned via DSL
DDD::Base::EventEmitter     base class for all event emitting objects
DDD::Base::Object           Common base class for almost all DDD-objects
DDD::Base::Service          Base class for service objects, auto-assigned via DSL
DDD::Base::Subdomain        Base class for subdomain

DDD::Domain                 Domain DSL *
DDD::Service                Service DSL *
DDD::Subdomain              Subdomain DSL * -- does it make sense?

DDD::EventPublisher         Publish/Subscribe

DDD::Aggregate              Base class for Aggregate
DDD::Entity                 Base class for Entity
DDD::Event                  Base class for Event
DDD::Factory                Base class for Factory
DDD::Repository             Base class for Repository
DDD::Value                  Base class for Value

DDD::LifeCycle::Request     same as Bread::Board::LifeCycle::Request from OX

DDD::Container::Meta::Role::Class   meta role for Domain and Subdomain objects
                                    (maintain service and subdomains)
DDD::Service::Meta::Role::Class     meta role for Service object
                                    (maintain subscribed events)
DDD::Service::Meta::Role::Method    meta role for Service method -- obsolete ???

Catalyst::Model::DDD        Catalyst Model for a domain

----

* DSL-Classes: just one use-statement, nothing else

Domain DSL -- keywords:
  * application == Bread::Board container
  * subdomain   == Bread::Board container
  * service     == object, needs domain
  * factory     == object, maybe without domain
  * repository  == object, maybe without domain
  * aggregate   == just a class, instantiated via new() when needed

Idee: 
  * DDD::Meta::Role::ContainerClass (maintain service + subdomains)
  * DDD::Meta::Role::ServiceClass (maintain subscribed events)
  * DDD::Meta::Role::DomainRelation (keep domain object)

----

Relations to 'domain' exist at
  * Application             --> must access subdomains and things inside
  * Domain, Subdomain       --> handle 'domain' to things
  * Factory, Repository     --> really needed?
  * Service                 --> to subscribe
  * Aggregate               --> to publish
 (* Entity                  --> to publish -- is Aggregate sufficient?)

