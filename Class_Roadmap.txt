Overview of all Classes
-----------------------

DDD                         empty package, just contains POD

DDD::Base::Container        common base for Domain / Subdomain
DDD::Base::Domain           Base class for domain objects, auto-assigned via DSL
DDD::Base::EventEmitter     base class for all event emitting objects
DDD::Base::Object           Common base class for almost all DDD-objects
DDD::Base::Service          Base class for service objects, auto-assigned via DSL
DDD::Base::Subdomain        Base class for subdomain

DDD::Domain                 Domain DSL *
DDD::Service                Service DSL *
DDD::Subdomain              Subdomain DSL * -- does it make sense?

DDD::EventPublisher         Publish/Subscribe

DDD::Aggregate              Base class for Aggregate
DDD::Entity                 Base class for Entity
DDD::Event                  Base class for Event
DDD::Factory                Base class for Factory
DDD::Repository             Base class for Repository
DDD::Value                  Base class for Value

DDD::LifeCycle::Request     same as Bread::Board::LifeCycle::Request from OX

DDD::Container::Meta::Role::Class   meta role for Domain and Subdomain objects
                                    (maintain service and subdomains)
DDD::Service::Meta::Role::Class     meta role for Service object
                                    (maintain subscribed events)
DDD::Service::Meta::Role::Method    meta role for Service method -- obsolete ???

Catalyst::Model::DDD        Catalyst Model for a domain

----

* DSL-Classes: just one use-statement, nothing else

Domain DSL -- keywords [meta role(s)]:
  * application == Bread::Board container [Domain]
  * subdomain   == Bread::Board container [Domain, Children]
  * service     == object, needs domain [Domain, Subscribe]
  * factory     == object, maybe without domain []
  * repository  == object, maybe without domain []
  * aggregate   == nothing special, but [Domain]

Idee: 
  * DDD::Meta::Role::Class::Container -- maintain service + subdomains
  * DDD::Meta::Role::Class::Subscribe -- maintain subscribed events
  * DDD::Meta::Role::Class::Domain    -- keep domain object

----

Relations to 'domain' exist for
  * Domain      --> knows itself
  * Application --> must access domain and its inside
  * Subdomain   --> handle 'domain' to things
  * Service     --> to subscribe
  * Aggregate   --> to publish

No relationship to 'domain' for
  * Factory
  * Repository
  * Entity
  * Value


Initialization - Timing
-----------------------

1) package X::Domain --> use DDD::Domain;

    apply DDD::Meta::Role::Class::Children to class X::Domain
    (maintain services, subdomains)

2) package X::Domain run thru keywords

    keywords: install Bread::Board services
    
    for every keyword, a class is loaded
    --> apply DDD::Meta::* to class

3) X::Domain->new -- actually instance() but new describes better what happens

    create object for Domain
    
    autoload subdomains and services
    --> recursively go thru all subdomains
    
    add request_scoped attributes to instance

